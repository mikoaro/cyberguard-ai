"use client"

import type React from "react"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Progress } from "@/components/ui/progress"
import { Label } from "@/components/ui/label"
import { Upload, AlertTriangle, Shield, CheckCircle, X, Download, FileText, File, Layers, Trash2 } from "lucide-react"
import { toast } from "sonner"

interface MalwareAnalysisResult {
  id: string
  filename: string
  fileType: string
  fileSize: string
  uploadTime: string
  status: "scanning" | "clean" | "malicious" | "suspicious"
  scanProgress?: number
  threatScore?: number
  threats?: {
    name: string
    severity: "high" | "medium" | "low"
    description: string
  }[]
  sandboxResults?: {
    behaviorObserved: string[]
    networkConnections: string[]
    fileOperations: string[]
    registryChanges: string[]
  }
}

export function MalwareAnalysis() {
  const [activeTab, setActiveTab] = useState("dashboard")
  const [fileUpload, setFileUpload] = useState<File | null>(null)
  const [isScanning, setIsScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const [analysisResults, setAnalysisResults] = useState<MalwareAnalysisResult[]>([
    {
      id: "1",
      filename: "invoice_march2025.pdf",
      fileType: "PDF Document",
      fileSize: "1.2 MB",
      uploadTime: "2025-03-14 09:23:45",
      status: "malicious",
      threatScore: 85,
      threats: [
        {
          name: "PDF.Exploit.CVE-2023-38831",
          severity: "high",
          description: "Exploits a vulnerability in PDF readers to execute arbitrary code",
        },
        {
          name: "Trojan.Downloader.PDF",
          severity: "high",
          description: "Downloads additional malware payloads when the document is opened",
        },
      ],
      sandboxResults: {
        behaviorObserved: [
          "Attempts to disable security software",
          "Creates persistence mechanism in startup folder",
          "Executes obfuscated JavaScript",
        ],
        networkConnections: [
          "Connects to malicious C2 server at 185.212.xx.xx",
          "Attempts to download additional payloads",
        ],
        fileOperations: ["Creates files in system directories", "Modifies system configuration files"],
        registryChanges: ["Adds autorun registry keys", "Modifies browser security settings"],
      },
    },
    {
      id: "2",
      filename: "company_presentation.pptx",
      fileType: "PowerPoint Presentation",
      fileSize: "4.5 MB",
      uploadTime: "2025-03-14 10:15:32",
      status: "clean",
      threatScore: 0,
    },
    {
      id: "3",
      filename: "system_update.exe",
      fileType: "Windows Executable",
      fileSize: "2.8 MB",
      uploadTime: "2025-03-14 11:05:27",
      status: "suspicious",
      threatScore: 65,
      threats: [
        {
          name: "Suspicious.Behavior.Heuristic",
          severity: "medium",
          description: "Exhibits behaviors consistent with potentially unwanted programs",
        },
      ],
      sandboxResults: {
        behaviorObserved: ["Attempts to modify system settings", "Runs with elevated privileges"],
        networkConnections: ["Connects to uncommon domains with poor reputation"],
        fileOperations: ["Creates hidden files in user directory"],
        registryChanges: ["Modifies startup configuration"],
      },
    },
  ])

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFileUpload(e.target.files[0])
      toast.info(`File selected: ${e.target.files[0].name}`, {
        description: "Click 'Analyze File' to scan for malware",
      })
    }
  }

  const handleScanFile = () => {
    if (!fileUpload) return

    setIsScanning(true)
    setScanProgress(0)

    // Simulate scanning progress
    const interval = setInterval(() => {
      setScanProgress((prev) => {
        const newProgress = prev + Math.floor(Math.random() * 10) + 1
        if (newProgress >= 100) {
          clearInterval(interval)
          setTimeout(() => {
            completeScan()
          }, 500)
          return 100
        }
        return newProgress
      })
    }, 300)
  }

  const completeScan = () => {
    // Determine scan result (for demo purposes)
    const isMalicious = Math.random() < 0.3 // 30% chance of being malicious
    const status = isMalicious ? "malicious" : Math.random() < 0.3 ? "suspicious" : "clean"

    // Create new analysis result
    const newResult: MalwareAnalysisResult = {
      id: Date.now().toString(),
      filename: fileUpload!.name,
      fileType: fileUpload!.type || "Unknown",
      fileSize: `${(fileUpload!.size / (1024 * 1024)).toFixed(2)} MB`,
      uploadTime: new Date().toLocaleString(),
      status: status as "scanning" | "clean" | "malicious" | "suspicious",
      threatScore:
        status === "malicious"
          ? Math.floor(Math.random() * 20) + 80
          : status === "suspicious"
            ? Math.floor(Math.random() * 30) + 50
            : 0,
    }

    // Add threats if malicious or suspicious
    if (status === "malicious" || status === "suspicious") {
      newResult.threats = [
        {
          name: status === "malicious" ? "Trojan.GenericKD.45678901" : "Suspicious.Behavior.Heuristic",
          severity: status === "malicious" ? "high" : "medium",
          description:
            status === "malicious"
              ? "Malicious trojan that steals sensitive information and establishes backdoor access"
              : "Exhibits behaviors consistent with potentially unwanted programs",
        },
      ]

      if (status === "malicious") {
        newResult.threats.push({
          name: "Exploit.PDF.CVE-2023-12345",
          severity: "high",
          description: "Exploits a vulnerability to execute arbitrary code",
        })
      }

      // Add sandbox results
      newResult.sandboxResults = {
        behaviorObserved: [
          status === "malicious" ? "Attempts to disable security software" : "Unusual system calls detected",
          status === "malicious" ? "Creates persistence mechanism" : "Accesses sensitive directories",
        ],
        networkConnections: [
          status === "malicious" ? "Connects to known malicious domains" : "Connects to uncommon domains",
        ],
        fileOperations: [status === "malicious" ? "Creates files in system directories" : "Creates temporary files"],
        registryChanges: [status === "malicious" ? "Adds autorun registry keys" : "Modifies application settings"],
      }
    }

    // Update state
    setAnalysisResults((prev) => [newResult, ...prev])
    setIsScanning(false)
    setFileUpload(null)

    // Show toast notification
    if (status === "malicious") {
      toast.error("Malware detected!", {
        description: "High risk threats found in the analyzed file.",
        action: {
          label: "View Details",
          onClick: () => setActiveTab("results"),
        },
      })
    } else if (status === "suspicious") {
      toast.warning("Suspicious file detected", {
        description: "Potential security risks identified in the file.",
        action: {
          label: "View Details",
          onClick: () => setActiveTab("results"),
        },
      })
    } else {
      toast.success("File is clean", {
        description: "No threats detected in the analysis.",
      })
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "malicious":
        return "bg-destructive text-destructive-foreground"
      case "suspicious":
        return "bg-amber-500 text-white"
      case "clean":
        return "bg-green-500 text-white"
      default:
        return "bg-secondary text-secondary-foreground"
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "malicious":
        return <AlertTriangle className="h-4 w-4 text-destructive" />
      case "suspicious":
        return <AlertTriangle className="h-4 w-4 text-amber-500" />
      case "clean":
        return <CheckCircle className="h-4 w-4 text-green-500" />
      default:
        return <Shield className="h-4 w-4" />
    }
  }

  return (
    <div className="space-y-4">
      <Tabs defaultValue="dashboard" onValueChange={setActiveTab} value={activeTab}>
        <TabsList className="mb-4">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="upload">Upload File</TabsTrigger>
          <TabsTrigger value="results">Analysis Results</TabsTrigger>
          <TabsTrigger value="sandbox">Sandbox Environment</TabsTrigger>
        </TabsList>

        <TabsContent value="dashboard">
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Files Analyzed</CardTitle>
                <FileText className="h-4 w-4 text-primary" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{analysisResults.length}</div>
                <p className="text-xs text-muted-foreground">Total files analyzed</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Malware Detected</CardTitle>
                <AlertTriangle className="h-4 w-4 text-destructive" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {analysisResults.filter((r) => r.status === "malicious").length}
                </div>
                <p className="text-xs text-muted-foreground">Malicious files identified</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Suspicious Files</CardTitle>
                <AlertTriangle className="h-4 w-4 text-amber-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {analysisResults.filter((r) => r.status === "suspicious").length}
                </div>
                <p className="text-xs text-muted-foreground">Files requiring attention</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Detection Rate</CardTitle>
                <Shield className="h-4 w-4 text-green-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">99.8%</div>
                <p className="text-xs text-muted-foreground">Malware detection accuracy</p>
              </CardContent>
            </Card>
          </div>

          <div className="grid gap-4 md:grid-cols-7">
            <Card className="md:col-span-4">
              <CardHeader>
                <CardTitle>Recent Analysis Results</CardTitle>
                <CardDescription>Latest files analyzed for malware</CardDescription>
              </CardHeader>
              <CardContent>
                <ScrollArea className="h-[400px]">
                  <div className="space-y-4">
                    {analysisResults.slice(0, 5).map((result) => (
                      <Card
                        key={result.id}
                        className="border-l-4"
                        style={{
                          borderLeftColor:
                            result.status === "malicious"
                              ? "var(--destructive)"
                              : result.status === "suspicious"
                                ? "orange"
                                : "green",
                        }}
                      >
                        <CardHeader className="pb-2">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              {getStatusIcon(result.status)}
                              <CardTitle className="text-base">{result.filename}</CardTitle>
                            </div>
                            <Badge className={getStatusColor(result.status)}>{result.status}</Badge>
                          </div>
                          <CardDescription>
                            {result.fileType} • {result.fileSize} • Analyzed: {result.uploadTime}
                          </CardDescription>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-2">
                            {result.threatScore !== undefined && result.threatScore > 0 && (
                              <div>
                                <div className="flex items-center justify-between mb-1">
                                  <span className="text-sm font-medium">Threat Score</span>
                                  <span
                                    className={`text-sm font-medium ${
                                      result.threatScore > 70
                                        ? "text-destructive"
                                        : result.threatScore > 40
                                          ? "text-amber-500"
                                          : "text-green-500"
                                    }`}
                                  >
                                    {result.threatScore}/100
                                  </span>
                                </div>
                                <Progress
                                  value={result.threatScore}
                                  className="h-2"
                                  style={
                                    {
                                      background: "var(--secondary)",
                                      "--progress-background":
                                        result.threatScore > 70
                                          ? "var(--destructive)"
                                          : result.threatScore > 40
                                            ? "orange"
                                            : "green",
                                    } as React.CSSProperties
                                  }
                                />
                              </div>
                            )}

                            {result.threats && result.threats.length > 0 && (
                              <div className="mt-2">
                                <p className="text-sm font-medium">Threats Detected:</p>
                                <ul className="mt-1 space-y-1">
                                  {result.threats.map((threat, index) => (
                                    <li key={index} className="text-sm flex items-start space-x-1">
                                      <Badge
                                        variant="outline"
                                        className={
                                          threat.severity === "high"
                                            ? "text-destructive border-destructive"
                                            : threat.severity === "medium"
                                              ? "text-amber-500 border-amber-500"
                                              : "text-yellow-500 border-yellow-500"
                                        }
                                      >
                                        {threat.severity}
                                      </Badge>
                                      <span>{threat.name}</span>
                                    </li>
                                  ))}
                                </ul>
                              </div>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </ScrollArea>
              </CardContent>
            </Card>

            <Card className="md:col-span-3">
              <CardHeader>
                <CardTitle>Malware Types Distribution</CardTitle>
                <CardDescription>Categories of detected malware</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-sm font-medium">Trojans</span>
                      <span className="text-sm">42%</span>
                    </div>
                    <div className="w-full bg-secondary rounded-full h-2">
                      <div className="bg-destructive h-2 rounded-full" style={{ width: "42%" }}></div>
                    </div>
                  </div>
                  <div>
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-sm font-medium">Ransomware</span>
                      <span className="text-sm">28%</span>
                    </div>
                    <div className="w-full bg-secondary rounded-full h-2">
                      <div className="bg-amber-500 h-2 rounded-full" style={{ width: "28%" }}></div>
                    </div>
                  </div>
                  <div>
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-sm font-medium">Exploits</span>
                      <span className="text-sm">15%</span>
                    </div>
                    <div className="w-full bg-secondary rounded-full h-2">
                      <div className="bg-blue-500 h-2 rounded-full" style={{ width: "15%" }}></div>
                    </div>
                  </div>
                  <div>
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-sm font-medium">Spyware</span>
                      <span className="text-sm">10%</span>
                    </div>
                    <div className="w-full bg-secondary rounded-full h-2">
                      <div className="bg-purple-500 h-2 rounded-full" style={{ width: "10%" }}></div>
                    </div>
                  </div>
                  <div>
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-sm font-medium">Other</span>
                      <span className="text-sm">5%</span>
                    </div>
                    <div className="w-full bg-secondary rounded-full h-2">
                      <div className="bg-green-500 h-2 rounded-full" style={{ width: "5%" }}></div>
                    </div>
                  </div>
                </div>

                <div className="mt-6">
                  <h4 className="text-sm font-medium mb-2">Detection Engines</h4>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Static Analysis</span>
                      <Badge variant="outline">Active</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Dynamic Analysis</span>
                      <Badge variant="outline">Active</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">AI-Powered Detection</span>
                      <Badge variant="outline">Active</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Heuristic Analysis</span>
                      <Badge variant="outline">Active</Badge>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="upload">
          <Card>
            <CardHeader>
              <CardTitle>Upload File for Analysis</CardTitle>
              <CardDescription>Upload a file to scan for malware, viruses, and other threats</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div
                  className="border-2 border-dashed rounded-lg p-10 text-center cursor-pointer hover:bg-muted/50 transition-colors"
                  onClick={() => document.getElementById("file-upload")?.click()}
                >
                  <Upload className="h-10 w-10 mx-auto mb-4 text-muted-foreground" />
                  <p className="text-lg font-medium">Drag and drop a file or click to browse</p>
                  <p className="text-sm text-muted-foreground mt-2">Supports all file types. Max size 50MB.</p>
                  <input
                    id="file-upload"
                    type="file"
                    className="hidden"
                    onChange={handleFileChange}
                    disabled={isScanning}
                  />
                </div>

                {fileUpload && (
                  <div className="p-4 bg-muted rounded">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <File className="h-5 w-5" />
                        <span className="font-medium">{fileUpload.name}</span>
                      </div>
                      <Button variant="ghost" size="sm" onClick={() => setFileUpload(null)} disabled={isScanning}>
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                    <div className="mt-2 text-sm text-muted-foreground">
                      <p>Size: {(fileUpload.size / 1024).toFixed(2)} KB</p>
                      <p>Type: {fileUpload.type || "Unknown"}</p>
                    </div>
                  </div>
                )}

                {isScanning && (
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Scanning progress</span>
                      <span className="text-sm">{scanProgress}%</span>
                    </div>
                    <Progress value={scanProgress} className="h-2" />
                    <p className="text-xs text-muted-foreground">
                      Running multiple detection engines and heuristic analysis...
                    </p>
                  </div>
                )}

                <div className="space-y-2">
                  <h3 className="text-sm font-medium">Analysis Options</h3>

                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="static-analysis"
                      className="rounded border-gray-300 text-primary focus:ring-primary"
                      defaultChecked
                    />
                    <Label htmlFor="static-analysis">Static Analysis</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="dynamic-analysis"
                      className="rounded border-gray-300 text-primary focus:ring-primary"
                      defaultChecked
                    />
                    <Label htmlFor="dynamic-analysis">Dynamic Analysis (Sandbox)</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="ai-detection"
                      className="rounded border-gray-300 text-primary focus:ring-primary"
                      defaultChecked
                    />
                    <Label htmlFor="ai-detection">AI-Powered Detection</Label>
                  </div>
                </div>
              </div>
            </CardContent>
            <CardFooter>
              <Button className="w-full" disabled={!fileUpload || isScanning} onClick={handleScanFile}>
                {isScanning ? "Analyzing..." : "Analyze File"}
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="results">
          <Card>
            <CardHeader>
              <CardTitle>Analysis Results</CardTitle>
              <CardDescription>Detailed results of malware analysis for all scanned files</CardDescription>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[600px]">
                <div className="space-y-6">
                  {analysisResults.map((result) => (
                    <Card
                      key={result.id}
                      className="border-l-4"
                      style={{
                        borderLeftColor:
                          result.status === "malicious"
                            ? "var(--destructive)"
                            : result.status === "suspicious"
                              ? "orange"
                              : "green",
                      }}
                    >
                      <CardHeader className="pb-2">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            {getStatusIcon(result.status)}
                            <CardTitle className="text-lg">{result.filename}</CardTitle>
                          </div>
                          <Badge className={getStatusColor(result.status)}>{result.status}</Badge>
                        </div>
                        <CardDescription>
                          {result.fileType} • {result.fileSize} • Analyzed: {result.uploadTime}
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {result.threatScore !== undefined && (
                            <div>
                              <div className="flex items-center justify-between mb-1">
                                <span className="text-sm font-medium">Threat Score</span>
                                <span
                                  className={`text-sm font-medium ${
                                    result.threatScore > 70
                                      ? "text-destructive"
                                      : result.threatScore > 40
                                        ? "text-amber-500"
                                        : "text-green-500"
                                  }`}
                                >
                                  {result.threatScore}/100
                                </span>
                              </div>
                              <Progress
                                value={result.threatScore}
                                className="h-2"
                                style={
                                  {
                                    background: "var(--secondary)",
                                    "--progress-background":
                                      result.threatScore > 70
                                        ? "var(--destructive)"
                                        : result.threatScore > 40
                                          ? "orange"
                                          : "green",
                                  } as React.CSSProperties
                                }
                              />
                            </div>
                          )}

                          {result.threats && result.threats.length > 0 && (
                            <div>
                              <h4 className="text-sm font-medium mb-2">Threats Detected:</h4>
                              <div className="space-y-2">
                                {result.threats.map((threat, index) => (
                                  <div key={index} className="bg-muted p-3 rounded">
                                    <div className="flex items-center justify-between">
                                      <span className="font-medium">{threat.name}</span>
                                      <Badge
                                        className={
                                          threat.severity === "high"
                                            ? "bg-destructive text-destructive-foreground"
                                            : threat.severity === "medium"
                                              ? "bg-amber-500 text-white"
                                              : "bg-yellow-500 text-white"
                                        }
                                      >
                                        {threat.severity} severity
                                      </Badge>
                                    </div>
                                    <p className="text-sm mt-1">{threat.description}</p>
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}

                          {result.sandboxResults && (
                            <div className="mt-4">
                              <h4 className="text-sm font-medium mb-2">Sandbox Analysis:</h4>

                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="bg-muted p-3 rounded">
                                  <h5 className="text-sm font-medium mb-1">Behavior Observed:</h5>
                                  <ul className="text-sm space-y-1">
                                    {result.sandboxResults.behaviorObserved.map((behavior, i) => (
                                      <li key={i} className="flex items-start space-x-1">
                                        <span>•</span>
                                        <span>{behavior}</span>
                                      </li>
                                    ))}
                                  </ul>
                                </div>

                                <div className="bg-muted p-3 rounded">
                                  <h5 className="text-sm font-medium mb-1">Network Connections:</h5>
                                  <ul className="text-sm space-y-1">
                                    {result.sandboxResults.networkConnections.map((connection, i) => (
                                      <li key={i} className="flex items-start space-x-1">
                                        <span>•</span>
                                        <span>{connection}</span>
                                      </li>
                                    ))}
                                  </ul>
                                </div>

                                <div className="bg-muted p-3 rounded">
                                  <h5 className="text-sm font-medium mb-1">File Operations:</h5>
                                  <ul className="text-sm space-y-1">
                                    {result.sandboxResults.fileOperations.map((operation, i) => (
                                      <li key={i} className="flex items-start space-x-1">
                                        <span>•</span>
                                        <span>{operation}</span>
                                      </li>
                                    ))}
                                  </ul>
                                </div>

                                <div className="bg-muted p-3 rounded">
                                  <h5 className="text-sm font-medium mb-1">Registry Changes:</h5>
                                  <ul className="text-sm space-y-1">
                                    {result.sandboxResults.registryChanges.map((change, i) => (
                                      <li key={i} className="flex items-start space-x-1">
                                        <span>•</span>
                                        <span>{change}</span>
                                      </li>
                                    ))}
                                  </ul>
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      </CardContent>
                      <CardFooter className="flex justify-between">
                        <Button variant="outline" size="sm">
                          <Download className="mr-2 h-4 w-4" />
                          Download Report
                        </Button>
                        <div className="space-x-2">
                          <Button variant="outline" size="sm">
                            <Shield className="mr-2 h-4 w-4" />
                            Quarantine
                          </Button>
                          <Button variant="destructive" size="sm">
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete File
                          </Button>
                        </div>
                      </CardFooter>
                    </Card>
                  ))}
                </div>
              </ScrollArea>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="sandbox">
          <Card>
            <CardHeader>
              <CardTitle>Sandbox Environment</CardTitle>
              <CardDescription>
                Isolated environment for safely executing and analyzing suspicious files
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm">Sandbox Status</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="flex items-center space-x-2">
                        <div className="h-3 w-3 rounded-full bg-green-500"></div>
                        <span className="font-medium">Active</span>
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">Ready for file analysis</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm">Virtual Machines</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="flex items-center justify-between">
                        <span>Available:</span>
                        <span className="font-medium">5/5</span>
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">All VMs operational</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm">Analysis Queue</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="flex items-center justify-between">
                        <span>Pending:</span>
                        <span className="font-medium">0</span>
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">No files waiting for analysis</p>
                    </CardContent>
                  </Card>
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="text-lg font-medium mb-4">Available Sandbox Environments</h3>

                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-2 bg-muted rounded">
                      <div className="flex items-center space-x-2">
                        <Layers className="h-5 w-5" />
                        <div>
                          <p className="font-medium">Windows 11 Enterprise</p>
                          <p className="text-xs text-muted-foreground">x64 architecture, 8GB RAM</p>
                        </div>
                      </div>
                      <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500">
                        Ready
                      </Badge>
                    </div>

                    <div className="flex items-center justify-between p-2 bg-muted rounded">
                      <div className="flex items-center space-x-2">
                        <Layers className="h-5 w-5" />
                        <div>
                          <p className="font-medium">Windows 10 Professional</p>
                          <p className="text-xs text-muted-foreground">x64 architecture, 8GB RAM</p>
                        </div>
                      </div>
                      <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500">
                        Ready
                      </Badge>
                    </div>

                    <div className="flex items-center justify-between p-2 bg-muted rounded">
                      <div className="flex items-center space-x-2">
                        <Layers className="h-5 w-5" />
                        <div>
                          <p className="font-medium">Ubuntu 22.04 LTS</p>
                          <p className="text-xs text-muted-foreground">x64 architecture, 4GB RAM</p>
                        </div>
                      </div>
                      <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500">
                        Ready
                      </Badge>
                    </div>

                    <div className="flex items-center justify-between p-2 bg-muted rounded">
                      <div className="flex items-center space-x-2">
                        <Layers className="h-5 w-5" />
                        <div>
                          <p className="font-medium">macOS Ventura</p>
                          <p className="text-xs text-muted-foreground">ARM64 architecture, 8GB RAM</p>
                        </div>
                      </div>
                      <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500">
                        Ready
                      </Badge>
                    </div>

                    <div className="flex items-center justify-between p-2 bg-muted rounded">
                      <div className="flex items-center space-x-2">
                        <Layers className="h-5 w-5" />
                        <div>
                          <p className="font-medium">Android 13</p>
                          <p className="text-xs text-muted-foreground">ARM64 architecture, 4GB RAM</p>
                        </div>
                      </div>
                      <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500">
                        Ready
                      </Badge>
                    </div>
                  </div>
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="text-lg font-medium mb-4">Sandbox Features</h3>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-500" />
                        <span>Process Monitoring</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-500" />
                        <span>Network Traffic Analysis</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-500" />
                        <span>File System Changes</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-500" />
                        <span>Registry Monitoring</span>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-500" />
                        <span>Memory Analysis</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-500" />
                        <span>API Call Tracing</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-500" />
                        <span>Screenshot Capture</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-green-500" />
                        <span>Behavioral Analysis</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
            <CardFooter>
              <Button className="w-full" onClick={() => setActiveTab("upload")}>
                Upload File for Sandbox Analysis
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

