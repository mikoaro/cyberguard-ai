"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Separator } from "@/components/ui/separator"
import {
  FileSearch,
  Send,
  User,
  Bot,
  AlertTriangle,
  CheckCircle,
  Shield,
  Upload,
  X,
  File,
  FileCode,
  SendHorizonal,
} from "lucide-react"
import { toast } from "sonner"
import { Label } from "@/components/ui/label"

// Import API functions
import {
  analyzeMalwareFile,
  checkMalwareAnalysisStatus,
  lookupMalwareHash,
  getMalwareSignatures,
} from "@/lib/api/malware-api"
import { Textarea } from "./ui/textarea"

interface Message {
  id: string
  role: "user" | "assistant"
  content: string
  timestamp: string
  fileAnalysis?: FileAnalysis
}

interface FileAnalysis {
  filename: string
  fileType: string
  fileSize: string
  status: "analyzing" | "malicious" | "suspicious" | "clean"
  analysisProgress?: number
  confidence: number
  malwareType?: string
  detectionEngine?: string
  threats?: {
    name: string
    description: string
    severity: "critical" | "high" | "medium" | "low"
  }[]
  behaviorAnalysis?: {
    fileOperations?: string[]
    networkActivity?: string[]
    registryChanges?: string[]
    processActivity?: string[]
  }
  recommendation?: string
  sha256?: string
  scanId?: string
}

interface MalwareSignature {
  id: string
  name: string
  type: string
  severity: "critical" | "high" | "medium" | "low"
  description: string
  detectionCount: number
  firstSeen: string
  lastSeen: string
}

export function MalwareDetectionAIAssistant() {
  const [input, setInput] = useState("")
  const [activeTab, setActiveTab] = useState("chat")
  const [isProcessing, setIsProcessing] = useState(false)
  const [fileUpload, setFileUpload] = useState<File | null>(null)
  const [fileHash, setFileHash] = useState("")
  const [activeScanId, setActiveScanId] = useState<string | null>(null)
  const [malwareSignatures, setMalwareSignatures] = useState<MalwareSignature[]>([])
  const [isLoadingSignatures, setIsLoadingSignatures] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const [selectedDetection, setSelectedDetection] = useState<string | null>(null)

  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      role: "assistant",
      content:
        "Welcome to your Malware Detection Assistant! Select an action to begin, then ask me anything about that topic",
      timestamp: new Date().toLocaleTimeString(),
    },
  ])

  const [recentDetections, setRecentDetections] = useState<
    {
      id: string
      filename: string
      fileType: string
      timestamp: string
      status: "malicious" | "suspicious" | "clean"
      malwareType?: string
      confidence: number
    }[]
  >([])

  const [isDragging, setIsDragging] = useState(false)

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(true)
  }

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(false)
  }

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(false)

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFileUpload(e.dataTransfer.files[0])
      toast.info(`File selected: ${e.dataTransfer.files[0].name}`, {
        description: "Click 'Analyze File' to scan for malware",
      })
    }
  }

  // Load malware signatures on component mount
  useEffect(() => {
    const loadSignatures = async () => {
      try {
        setIsLoadingSignatures(true)
        const data = await getMalwareSignatures(10)
        setMalwareSignatures(data.signatures || [])
      } catch (error) {
        console.error("Error loading malware signatures:", error)
        toast.error("Failed to load malware signatures. Using default data.")

        // Set default signatures if API fails
        setMalwareSignatures([
          {
            id: "1",
            name: "Trojan.PDF.Exploit.CVE-2023-38831",
            type: "Exploit",
            severity: "critical",
            description: "Exploits a vulnerability in PDF readers to execute arbitrary code",
            detectionCount: 127,
            firstSeen: "2023-09-15",
            lastSeen: "2025-03-14",
          },
          {
            id: "2",
            name: "Ransomware.Win32.WannaCry",
            type: "Ransomware",
            severity: "critical",
            description: "Encrypts files and demands payment for decryption",
            detectionCount: 89,
            firstSeen: "2017-05-12",
            lastSeen: "2025-03-10",
          },
          {
            id: "3",
            name: "Backdoor.Win64.Emotet",
            type: "Backdoor",
            severity: "high",
            description: "Banking trojan that provides backdoor access to infected systems",
            detectionCount: 156,
            firstSeen: "2014-06-01",
            lastSeen: "2025-03-12",
          },
          {
            id: "4",
            name: "PUA.Win32.Adware.DownloadSponsor",
            type: "Adware",
            severity: "medium",
            description: "Displays unwanted advertisements and collects user data",
            detectionCount: 213,
            firstSeen: "2022-11-05",
            lastSeen: "2025-03-14",
          },
          {
            id: "5",
            name: "Trojan.JS.Miner",
            type: "Cryptominer",
            severity: "medium",
            description: "Uses system resources to mine cryptocurrency without user consent",
            detectionCount: 178,
            firstSeen: "2021-03-22",
            lastSeen: "2025-03-13",
          },
        ])
      } finally {
        setIsLoadingSignatures(false)
      }
    }

    loadSignatures()
  }, [])

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [messages])

  // Poll for scan status if there's an active scan
  useEffect(() => {
    if (!activeScanId) return

    const pollInterval = setInterval(async () => {
      try {
        const statusResponse = await checkMalwareAnalysisStatus(activeScanId)

        if (statusResponse.status === "completed" || statusResponse.status === "failed") {
          clearInterval(pollInterval)
          setActiveScanId(null)

          // Update the message with the analysis results
          if (statusResponse.status === "completed" && statusResponse.result) {
            const result = statusResponse.result
            const status = result.isMalicious ? "malicious" : result.isSuspicious ? "suspicious" : "clean"

            // Update message with analysis results
            setMessages((prev) =>
              prev.map((msg) =>
                msg.fileAnalysis?.scanId === activeScanId
                  ? {
                      ...msg,
                      fileAnalysis: {
                        ...msg.fileAnalysis,
                        status,
                        confidence: result.confidence,
                        malwareType: result.malwareType,
                        detectionEngine: result.detectionEngine,
                        threats: result.threats,
                        behaviorAnalysis: result.behaviorAnalysis,
                        recommendation: result.recommendation,
                        analysisProgress: 100,
                      },
                    }
                  : msg,
              ),
            )

            // Add to recent detections if not clean
            if (status !== "clean") {
              const messageWithScanId = messages.find((m) => m.fileAnalysis?.scanId === activeScanId)
              if (messageWithScanId?.fileAnalysis) {
                setRecentDetections((prev) => [
                  {
                    id: Date.now().toString(),
                    filename: messageWithScanId.fileAnalysis?.filename || "Unknown",
                    fileType: messageWithScanId.fileAnalysis?.fileType || "Unknown",
                    timestamp: new Date().toLocaleString(),
                    status,
                    malwareType: result.malwareType,
                    confidence: result.confidence,
                  },
                  ...prev.slice(0, 9),
                ])
              }
            }

            // Show toast notification based on analysis result
            if (status === "malicious") {
              toast.error("Malware detected!", {
                description: "High risk threat found in the analyzed file.",
                action: {
                  label: "View Details",
                  onClick: () => console.log("View threat details"),
                },
              })
            } else if (status === "suspicious") {
              toast.warning("Suspicious file detected", {
                description: "Potential security risks identified in the file.",
              })
            } else {
              toast.success("File is clean", {
                description: "No threats detected in the analysis.",
              })
            }

            // Generate AI response after analysis completes
            generateAIResponse(messages.find((m) => m.fileAnalysis?.scanId === activeScanId) as Message, status)
          } else {
            // Handle failed analysis
            setMessages((prev) =>
              prev.map((msg) =>
                msg.fileAnalysis?.scanId === activeScanId
                  ? {
                      ...msg,
                      fileAnalysis: {
                        ...msg.fileAnalysis,
                        status: "analyzing",
                        analysisProgress: 100,
                      },
                    }
                  : msg,
              ),
            )

            toast.error("Analysis failed", {
              description: statusResponse.error || "Failed to analyze file. Please try again.",
            })

            setIsProcessing(false)
          }
        } else {
          // Update progress for ongoing analysis
          const progress = Math.min(
            95,
            (messages.find((m) => m.fileAnalysis?.scanId === activeScanId)?.fileAnalysis?.analysisProgress || 0) + 5,
          )

          setMessages((prev) =>
            prev.map((msg) =>
              msg.fileAnalysis?.scanId === activeScanId
                ? {
                    ...msg,
                    fileAnalysis: {
                      ...msg.fileAnalysis,
                      analysisProgress: progress,
                    },
                  }
                : msg,
            ),
          )
        }
      } catch (error) {
        console.error("Error polling scan status:", error)
      }
    }, 2000)

    return () => clearInterval(pollInterval)
  }, [activeScanId, messages])

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!input.trim() && !fileUpload && !fileHash) return

    const newMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content:
        input ||
        (fileUpload
          ? `Can you analyze this file for malware?`
          : fileHash
            ? `Can you analyze this hash: ${fileHash}?`
            : ""),
      timestamp: new Date().toLocaleTimeString(),
    }

    // Handle file upload
    if (fileUpload) {
      const fileAnalysis: FileAnalysis = {
        filename: fileUpload.name,
        fileType: fileUpload.type || "Unknown",
        fileSize: `${(fileUpload.size / (1024 * 1024)).toFixed(2)} MB`,
        status: "analyzing",
        confidence: 0,
        analysisProgress: 0,
        scanId: `scan-${Date.now()}`,
      }

      newMessage.fileAnalysis = fileAnalysis
    }

    // Handle hash analysis
    if (fileHash && !fileUpload) {
      const hashAnalysis: FileAnalysis = {
        filename: "Unknown (Hash Only)",
        fileType: "Unknown",
        fileSize: "N/A",
        status: "analyzing",
        confidence: 0,
        analysisProgress: 0,
        sha256: fileHash,
      }

      newMessage.fileAnalysis = hashAnalysis
    }

    setMessages((prev) => [...prev, newMessage])
    setInput("")
    setIsProcessing(true)

    try {
      // Process file upload with API
      if (fileUpload) {
        const analysisOptions = {
          staticAnalysis: true,
          dynamicAnalysis: true,
          aiDetection: true,
          memoryAnalysis: true,
        }

        const response = await analyzeMalwareFile(fileUpload, analysisOptions)

        if (response.status === "failed") {
          toast.error("File analysis failed", {
            description: response.error || "Failed to analyze file. Please try again.",
          })

          setMessages((prev) =>
            prev.map((msg) =>
              msg.id === newMessage.id
                ? {
                    ...msg,
                    fileAnalysis: {
                      ...msg.fileAnalysis!,
                      status: "analyzing",
                      analysisProgress: 100,
                    },
                  }
                : msg,
            ),
          )

          setIsProcessing(false)
        } else {
          // Update message with scan ID and set active scan
          setMessages((prev) =>
            prev.map((msg) =>
              msg.id === newMessage.id
                ? {
                    ...msg,
                    fileAnalysis: {
                      ...msg.fileAnalysis!,
                      scanId: response.scanId,
                      analysisProgress: 5,
                    },
                  }
                : msg,
            ),
          )

          setActiveScanId(response.scanId)
          setFileUpload(null)
          if (fileInputRef.current) {
            fileInputRef.current.value = ""
          }
        }
      }
      // Process hash lookup with API
      else if (fileHash) {
        const response = await lookupMalwareHash(fileHash)

        if (response.found) {
          // Update message with hash lookup results
          setMessages((prev) =>
            prev.map((msg) =>
              msg.id === newMessage.id
                ? {
                    ...msg,
                    fileAnalysis: {
                      ...msg.fileAnalysis!,
                      status: "malicious",
                      confidence: 100,
                      malwareType: response.malwareInfo?.name,
                      threats: [
                        {
                          name: response.malwareInfo?.name || "Unknown Malware",
                          description: response.malwareInfo?.description || "No description available",
                          severity: response.malwareInfo?.severity || "high",
                        },
                      ],
                      recommendation:
                        "This hash is associated with known malware. Any file with this hash should be considered malicious and removed immediately.",
                      analysisProgress: 100,
                    },
                  }
                : msg,
            ),
          )

          toast.error("Malware hash detected!", {
            description: "This hash matches known malware in our database.",
          })

          // Generate AI response for malicious hash
          generateAIResponse(newMessage, "malicious")
        } else {
          // Update message for clean hash
          setMessages((prev) =>
            prev.map((msg) =>
              msg.id === newMessage.id
                ? {
                    ...msg,
                    fileAnalysis: {
                      ...msg.fileAnalysis!,
                      status: "clean",
                      confidence: 90,
                      recommendation:
                        "This hash does not match any known malware in our database. However, this doesn't guarantee the file is safe as it may be a new or unknown threat.",
                      analysisProgress: 100,
                    },
                  }
                : msg,
            ),
          )

          toast.success("Hash not found in malware database", {
            description: "The hash doesn't match any known threats in our database.",
          })

          // Generate AI response for clean hash
          generateAIResponse(newMessage, "clean")
        }

        setFileHash("")
        setIsProcessing(false)
      }
      // Handle regular text message
      else {
        // For text-only queries, generate response directly
        setTimeout(() => {
          generateAIResponse(newMessage)
        }, 1000)
      }
    } catch (error) {
      console.error("Error processing request:", error)
      toast.error("An error occurred", {
        description: "Failed to process your request. Please try again.",
      })
      setIsProcessing(false)
    }
  }

  const generateAIResponse = (userMessage: Message, fileStatus?: string) => {
    let responseContent = ""

    // Generate response based on file analysis
    if (fileStatus) {
      if (fileStatus === "malicious") {
        responseContent = `I've completed the analysis of your file and detected high-confidence malware. This file contains:

1. **${userMessage.fileAnalysis?.malwareType}** - A malicious threat that can compromise your system security
2. Multiple suspicious behaviors including:
   - Attempts to modify system settings
   - Connection to known malicious domains
   - Creation of persistent mechanisms
   - Possible data exfiltration activity

**Recommendation:** Delete this file immediately and run a full system scan. If you've already executed this file, you should:
1. Disconnect from the network
2. Run a comprehensive antivirus scan
3. Check for unusual system behavior
4. Consider changing critical passwords from a clean device

Would you like me to explain more about this specific malware type or provide recovery steps?`
      } else if (fileStatus === "suspicious") {
        responseContent = `I've analyzed the file and while I didn't detect known malware, it exhibits several suspicious behaviors that warrant caution:

1. The file contains unusual code patterns consistent with **${userMessage.fileAnalysis?.malwareType}**
2. Suspicious behaviors detected:
   - Unusual system access attempts
   - Connects to domains with poor reputation
   - Creates persistent components
   - Uses techniques often associated with potentially unwanted applications

**Recommendation:** Handle this file with caution. I suggest:
1. Not executing this file in a production environment
2. Submitting it to your security team for further analysis
3. Running it in a sandbox environment if you must access it
4. Updating your security software to the latest version

Would you like me to provide more specific details about the suspicious behaviors?`
      } else {
        responseContent = `I've completed the analysis of your file and no malware or suspicious content was detected. The file appears to be clean and safe to use.

The analysis included:
1. Static code analysis
2. Behavior simulation
3. Signature matching against known threats
4. Heuristic analysis for suspicious patterns

However, always remember that new threats emerge daily, so continue practicing good security hygiene:
- Keep your security software updated
- Only download files from trusted sources
- Scan files before opening them

Is there anything else you'd like me to help you with?`
      }
    } else if (userMessage.content.toLowerCase().includes("hash")) {
      // Handle hash analysis queries
      const hashResponses = [
        "I've analyzed the hash you provided and it doesn't match any known malware in our database. This suggests the file is likely clean, but remember that new threats emerge constantly. Would you like me to explain how to verify files using multiple reputation services?",

        "The hash you've shared matches a known malware signature in our database. This file is identified as Trojan.Downloader, a malicious program that downloads additional payloads. I recommend immediately removing any file with this hash from your system and running a full security scan.",

        "I've checked this hash against our threat intelligence database. It's associated with a potentially unwanted application (PUA) that displays advertisements and collects user data. While not strictly malware, these applications can degrade system performance and privacy.",

        "This hash is associated with a critical ransomware variant first detected in January 2025. If you have this file on your system, isolate the device immediately and contact your security team. Would you like me to provide specific containment and recovery steps?",

        "The hash analysis is inconclusive. While it doesn't match known malware signatures, it has been flagged by some security vendors as suspicious. I recommend submitting the file to a multi-engine scanning service for more comprehensive analysis.",
      ]

      responseContent = hashResponses[Math.floor(Math.random() * hashResponses.length)]
    } else {
      // Handle regular text queries about malware
      const malwareResponses = [
        "Based on your description, this appears to be a variant of polymorphic malware that changes its code to evade detection. These threats typically use encryption, code obfuscation, and variable mutation to appear different while maintaining the same malicious functionality. Advanced behavioral analysis is the most effective detection method.",

        "The symptoms you're describing are consistent with a rootkit infection. Rootkits operate at a deep system level, often with kernel privileges, making them difficult to detect and remove. I recommend booting from a clean external media and using specialized rootkit removal tools rather than standard antivirus software.",

        "This behavior pattern matches a fileless malware attack. These sophisticated threats reside entirely in memory and leverage legitimate system tools like PowerShell to execute malicious activities without writing files to disk. Memory scanning and behavioral monitoring are essential for detection.",

        "The network traffic patterns you've shared indicate a potential botnet infection. The irregular outbound connections to multiple IP addresses using encrypted protocols suggest command and control communication. I recommend isolating the affected systems while preserving evidence for forensic analysis.",

        "Based on the system changes you've observed, this appears to be a supply chain attack where legitimate software was compromised to distribute malware. The digital signature remains valid because the attackers compromised the software before it was signed. This highlights the importance of defense-in-depth security strategies.",
      ]

      responseContent = malwareResponses[Math.floor(Math.random() * malwareResponses.length)]
    }

    const aiMessage: Message = {
      id: Date.now().toString(),
      role: "assistant",
      content: responseContent,
      timestamp: new Date().toLocaleTimeString(),
    }

    setMessages((prev) => [...prev, aiMessage])
    setIsProcessing(false)
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFileUpload(e.target.files[0])
      toast.info(`File selected: ${e.target.files[0].name}`, {
        description: "Click 'Analyze File' to scan for malware",
      })
    }
  }

  const triggerFileUpload = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click()
    }
  }

  const removeSelectedFile = () => {
    setFileUpload(null)
    if (fileInputRef.current) {
      fileInputRef.current.value = ""
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "malicious":
        return "bg-destructive text-destructive-foreground"
      case "suspicious":
        return "bg-amber-500 text-white"
      case "clean":
        return "bg-green-500 text-white"
      default:
        return "bg-secondary text-secondary-foreground"
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "malicious":
        return <AlertTriangle className="h-4 w-4 text-destructive" />
      case "suspicious":
        return <AlertTriangle className="h-4 w-4 text-amber-500" />
      case "clean":
        return <CheckCircle className="h-4 w-4 text-green-500" />
      default:
        return <Shield className="h-4 w-4" />
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "text-destructive border-destructive"
      case "high":
        return "text-red-500 border-red-500"
      case "medium":
        return "text-amber-500 border-amber-500"
      case "low":
        return "text-blue-500 border-blue-500"
      default:
        return "text-muted-foreground border-muted-foreground"
    }
  }

  const getSeverityBadgeColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-destructive text-destructive-foreground"
      case "high":
        return "bg-red-500 text-white"
      case "medium":
        return "bg-amber-500 text-white"
      case "low":
        return "bg-blue-500 text-white"
      default:
        return "bg-secondary text-secondary-foreground"
    }
  }

  const handleViewDetails = (detectionId: string) => {
    // Find the detection
    const detection = recentDetections.find((d) => d.id === detectionId)
    if (!detection) return

    // Create a message about this detection
    setInput(`Can you tell me more about the ${detection.malwareType || "malware"} detected in ${detection.filename}?`)

    // Switch to chat tab and submit
    setActiveTab("chat")
    setTimeout(() => {
      handleSendMessage(new Event("submit") as any)
    }, 100)
  }

  const handleViewSignatureDetails = (signatureId: string) => {
    // Find the signature
    const signature = malwareSignatures.find((s) => s.id === signatureId)
    if (!signature) return

    // Create a message about this signature
    setInput(`Can you tell me more about the ${signature.name} malware and how to protect against it?`)

    // Switch to chat tab and submit
    setActiveTab("chat")
    setTimeout(() => {
      handleSendMessage(new Event("submit") as any)
    }, 100)
  }

  return (
    <Card className="max-h-[calc(100vh-22rem)] min-h-[calc(100vh-22rem)]">
      <CardHeader>
        <div className="flex items-center space-x-2">
          <FileSearch className="h-5 w-5 text-primary" />
          <CardTitle>Malware Detection AI Assistant</CardTitle>
        </div>
        <CardDescription>
          Advanced AI-powered analysis of files and suspicious behavior for malware detection
        </CardDescription>
      </CardHeader>
       <CardContent className="flex flex-col h-[calc(100%-5rem)] overflow-y-auto pb-20">
        <Tabs defaultValue="chat" className="mb-4" onValueChange={setActiveTab}>
          <TabsList>
            <TabsTrigger value="chat">Chat</TabsTrigger>
            <TabsTrigger value="upload">File Analysis</TabsTrigger>
            <TabsTrigger value="hash">Hash Lookup</TabsTrigger>
            <TabsTrigger value="recent">Recent Detections</TabsTrigger>
            <TabsTrigger value="signatures">Malware Database</TabsTrigger>
          </TabsList>

          <TabsContent value="chat" className="flex-1 flex flex-col">
            <div className="flex flex-col space-y-4 mb-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card
                  className="p-4 hover:bg-accent cursor-pointer transition-colors"
                  onClick={() => {
                    setInput("Can you analyze this file for potential malware?")
                    triggerFileUpload()
                  }}
                >
                  <div className="flex items-center space-x-2">
                    <FileSearch className="h-5 w-5 text-primary" />
                    <div>
                      <h3 className="font-medium">Analyze File</h3>
                      <p className="text-sm text-muted-foreground">Upload and scan a file for malware threats</p>
                    </div>
                  </div>
                </Card>

                <Card
                  className="p-4 hover:bg-accent cursor-pointer transition-colors"
                  onClick={() => {
                    setInput("What are the latest malware threats you've detected?")
                    handleSendMessage(new Event("submit") as any)
                  }}
                >
                  <div className="flex items-center space-x-2">
                    <AlertTriangle className="h-5 w-5 text-primary" />
                    <div>
                      <h3 className="font-medium">Latest Threats</h3>
                      <p className="text-sm text-muted-foreground">Get updates on recent malware detections</p>
                    </div>
                  </div>
                </Card>

                <Card
                  className="p-4 hover:bg-accent cursor-pointer transition-colors"
                  onClick={() => {
                    setInput("Can you explain how to protect against ransomware?")
                    handleSendMessage(new Event("submit") as any)
                  }}
                >
                  <div className="flex items-center space-x-2">
                    <Shield className="h-5 w-5 text-primary" />
                    <div>
                      <h3 className="font-medium">Recommend Security measures and Tips</h3>
                      <p className="text-sm text-muted-foreground">Advise on the best security practices, tools, and software to safeguard digital assets</p>
                    </div>
                  </div>
                </Card>

                <Card
                  className="p-4 hover:bg-accent cursor-pointer transition-colors"
                  onClick={() => {
                    setInput("What should I do if I suspect my system is infected with malware?")
                    handleSendMessage(new Event("submit") as any)
                  }}
                >
                  <div className="flex items-center space-x-2">
                    <FileCode className="h-5 w-5 text-primary" />
                    <div>
                      <h3 className="font-medium">Incident Response Planning</h3>
                      <p className="text-sm text-muted-foreground">Assist in creating or reviewing incident response strategies.</p>
                    </div>
                  </div>
                </Card>

                <Card
                  className="p-4 hover:bg-accent cursor-pointer transition-colors"
                  onClick={() => {
                    setInput("Can you educate me on Cyber Hygiene and what it entails?")
                    handleSendMessage(new Event("submit") as any)
                  }}
                >
                  <div className="flex items-center space-x-2">
                    <FileCode className="h-5 w-5 text-primary" />
                    <div>
                      <h3 className="font-medium">Educate on Cyber Hygiene</h3>
                      <p className="text-sm text-muted-foreground">Guide users through the essentials of cyber hygiene.</p>
                    </div>
                  </div>
                </Card>

                <Card
                  className="p-4 hover:bg-accent cursor-pointer transition-colors"
                  onClick={() => {
                    setInput("Can you help me critique the following security policies?")
                    handleSendMessage(new Event("submit") as any)
                  }}
                >
                  <div className="flex items-center space-x-2">
                    <FileCode className="h-5 w-5 text-primary" />
                    <div>
                      <h3 className="font-medium">Review Security Policies</h3>
                      <p className="text-sm text-muted-foreground">Assess and critique existing security policies or guidelines of user's organization</p>
                    </div>
                  </div>
                </Card>
              </div>

              {messages.length === 0 && (
                <div className="text-center py-8">
                  <Bot className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                  <h3 className="text-lg font-medium mb-2">Start a conversation</h3>
                  <p className="text-sm text-muted-foreground">
                    Ask questions about malware detection, file analysis, or security best practices
                  </p>
                </div>
              )}
            </div>
            <ScrollArea className="flex-1 pr-4">
              <div className="space-y-4">
                {messages.map((message) => (
                  <div key={message.id} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                    <div
                      className={`flex items-start space-x-2 max-w-[80%] ${
                        message.role === "user" ? "flex-row-reverse space-x-reverse" : ""
                      }`}
                    >
                      <div
                        className={`flex items-center justify-center h-8 w-8 rounded-full ${
                          message.role === "user" ? "bg-primary" : "bg-secondary"
                        }`}
                      >
                        {message.role === "user" ? (
                          <User className="h-5 w-5 text-primary-foreground" />
                        ) : (
                          <Bot className="h-5 w-5" />
                        )}
                      </div>
                      <div className="space-y-2">
                        <div
                          className={`p-3 rounded-lg ${
                            message.role === "user" ? "bg-primary text-primary-foreground" : "bg-muted"
                          }`}
                        >
                          {message.content.split("\n").map((line, i) => (
                            <p key={i} className={i > 0 ? "mt-2" : ""}>
                              {line}
                            </p>
                          ))}

                          {/* Render file analysis if any */}
                          {message.fileAnalysis && (
                            <div className="mt-3 p-2 bg-background rounded border">
                              <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-2">
                                  <File className="h-4 w-4" />
                                  <span className="text-sm font-medium">{message.fileAnalysis.filename}</span>
                                </div>
                                {message.fileAnalysis.status !== "analyzing" && (
                                  <Badge className={getStatusColor(message.fileAnalysis.status)}>
                                    {message.fileAnalysis.status}
                                  </Badge>
                                )}
                              </div>

                              <div className="flex items-center space-x-4 text-xs text-muted-foreground mt-1">
                                <span>Type: {message.fileAnalysis.fileType}</span>
                                <span>Size: {message.fileAnalysis.fileSize}</span>
                              </div>

                              {message.fileAnalysis.status === "analyzing" && (
                                <div className="mt-2">
                                  <Progress value={message.fileAnalysis.analysisProgress} className="h-1" />
                                  <p className="text-xs text-muted-foreground mt-1">
                                    Analyzing file for malware... {message.fileAnalysis.analysisProgress}%
                                  </p>
                                </div>
                              )}

                              {message.fileAnalysis.status !== "analyzing" &&
                                message.fileAnalysis.confidence !== undefined && (
                                  <div className="mt-2">
                                    <div className="flex items-center justify-between mb-1">
                                      <span className="text-xs">Detection Confidence</span>
                                      <span
                                        className={`text-xs font-medium ${
                                          message.fileAnalysis.confidence > 90
                                            ? "text-destructive"
                                            : message.fileAnalysis.confidence > 70
                                              ? "text-amber-500"
                                              : "text-green-500"
                                        }`}
                                      >
                                        {message.fileAnalysis.confidence}%
                                      </span>
                                    </div>
                                    <Progress
                                      value={message.fileAnalysis.confidence}
                                      className="h-1"
                                      style={
                                        {
                                          background: "var(--secondary)",
                                          "--progress-background":
                                            message.fileAnalysis.confidence > 90
                                              ? "var(--destructive)"
                                              : message.fileAnalysis.confidence > 70
                                                ? "orange"
                                                : "green",
                                        } as React.CSSProperties
                                      }
                                    />
                                  </div>
                                )}

                              {message.fileAnalysis.malwareType && (
                                <div className="mt-2 text-xs">
                                  <span className="font-medium">Detected Threat:</span>{" "}
                                  {message.fileAnalysis.malwareType}
                                </div>
                              )}

                              {message.fileAnalysis.detectionEngine && (
                                <div className="mt-1 text-xs">
                                  <span className="font-medium">Detection Method:</span>{" "}
                                  {message.fileAnalysis.detectionEngine}
                                </div>
                              )}

                              {message.fileAnalysis.threats && message.fileAnalysis.threats.length > 0 && (
                                <div className="mt-2">
                                  <p className="text-xs font-medium">Threat Details:</p>
                                  <div className="mt-1 space-y-1">
                                    {message.fileAnalysis.threats.map((threat, i) => (
                                      <div key={i} className="flex items-start space-x-1">
                                        <Badge variant="outline" className={getSeverityColor(threat.severity)}>
                                          {threat.severity}
                                        </Badge>
                                        <div className="text-xs">
                                          <p className="font-medium">{threat.name}</p>
                                          <p className="text-muted-foreground">{threat.description}</p>
                                        </div>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )}

                              {message.fileAnalysis.behaviorAnalysis && (
                                <div className="mt-2">
                                  <p className="text-xs font-medium">Behavior Analysis:</p>
                                  <div className="mt-1 grid grid-cols-1 md:grid-cols-2 gap-2 text-xs">
                                    {message.fileAnalysis.behaviorAnalysis.fileOperations && (
                                      <div>
                                        <p className="font-medium">File Operations:</p>
                                        <ul className="list-disc list-inside text-muted-foreground">
                                          {message.fileAnalysis.behaviorAnalysis.fileOperations.map((op, i) => (
                                            <li key={i}>{op}</li>
                                          ))}
                                        </ul>
                                      </div>
                                    )}

                                    {message.fileAnalysis.behaviorAnalysis.networkActivity && (
                                      <div>
                                        <p className="font-medium">Network Activity:</p>
                                        <ul className="list-disc list-inside text-muted-foreground">
                                          {message.fileAnalysis.behaviorAnalysis.networkActivity.map((activity, i) => (
                                            <li key={i}>{activity}</li>
                                          ))}
                                        </ul>
                                      </div>
                                    )}

                                    {message.fileAnalysis.behaviorAnalysis.registryChanges && (
                                      <div>
                                        <p className="font-medium">Registry Changes:</p>
                                        <ul className="list-disc list-inside text-muted-foreground">
                                          {message.fileAnalysis.behaviorAnalysis.registryChanges.map((change, i) => (
                                            <li key={i}>{change}</li>
                                          ))}
                                        </ul>
                                      </div>
                                    )}

                                    {message.fileAnalysis.behaviorAnalysis.processActivity && (
                                      <div>
                                        <p className="font-medium">Process Activity:</p>
                                        <ul className="list-disc list-inside text-muted-foreground">
                                          {message.fileAnalysis.behaviorAnalysis.processActivity.map((activity, i) => (
                                            <li key={i}>{activity}</li>
                                          ))}
                                        </ul>
                                      </div>
                                    )}
                                  </div>
                                </div>
                              )}

                              {message.fileAnalysis.sha256 && (
                                <div className="mt-2 text-xs">
                                  <span className="font-medium">SHA256:</span>
                                  <code className="ml-1 p-1 bg-muted rounded text-xs font-mono break-all">
                                    {message.fileAnalysis.sha256}
                                  </code>
                                </div>
                              )}

                              {message.fileAnalysis.recommendation && (
                                <div className="mt-2 text-xs p-1.5 bg-muted rounded">
                                  <strong>Recommendation:</strong> {message.fileAnalysis.recommendation}
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                        <p className="text-xs text-muted-foreground">{message.timestamp}</p>
                      </div>
                    </div>
                  </div>
                ))}
                {isProcessing && !activeScanId && (
                  <div className="flex justify-start">
                    <div className="flex items-start space-x-2 max-w-[80%]">
                      <div className="flex items-center justify-center h-8 w-8 rounded-full bg-secondary">
                        <Bot className="h-5 w-5" />
                      </div>
                      <div>
                        <div className="p-3 rounded-lg bg-muted">
                          <div className="flex space-x-1">
                            <div className="h-2 w-2 bg-current rounded-full animate-bounce [animation-delay:-0.3s]"></div>
                            <div className="h-2 w-2 bg-current rounded-full animate-bounce [animation-delay:-0.15s]"></div>
                            <div className="h-2 w-2 bg-current rounded-full animate-bounce"></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>

            <form onSubmit={handleSendMessage} className="flex space-x-2 fixed bottom-12 lg:bottom-34 right-0 left-64 container mx-auto w-318 rounded-b-lg p-2 bg-white">
              <Textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Ask about malware or upload a file for analysis..."
                disabled={isProcessing}
                className="flex-1 h-20"
              />
              <input type="file" ref={fileInputRef} onChange={handleFileChange} className="hidden" />
              <div className="absolute right-10 bottom-5 flex gap-3">
                <Button
                className="size-sm"
                  type="button"
                  size="icon"
                  variant="outline"
                  onClick={triggerFileUpload}
                  disabled={isProcessing || fileUpload !== null}
                >
                  <Upload className="h-4 w-4" />
                </Button>
                <Button className="size-sm" type="submit" size="icon" disabled={isProcessing && !fileUpload && !input}>
                  <SendHorizonal className="h-4 w-4" />
                </Button>
              </div>
            </form>

            {fileUpload && (
              <div className="mt-2 p-2 bg-muted rounded flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <File className="h-4 w-4" />
                  <span className="text-sm">{fileUpload.name}</span>
                </div>
                <Button variant="ghost" size="sm" onClick={removeSelectedFile}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            )}
          </TabsContent>

          <TabsContent value="upload" className="flex-1 flex flex-col">
            <Card>
              <CardHeader>
                <CardTitle>File Analysis</CardTitle>
                <CardDescription>Upload a file for comprehensive malware analysis</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div
                    className={`border-2 border-dashed rounded-lg p-10 text-center cursor-pointer hover:bg-muted/50 transition-colors ${
                      isDragging ? "border-primary bg-muted/50" : "border-border"
                    }`}
                    onClick={triggerFileUpload}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                  >
                    <Upload className="h-10 w-10 mx-auto mb-4 text-muted-foreground" />
                    <p className="text-lg font-medium">Drag and drop a file or click to browse</p>
                    <p className="text-sm text-muted-foreground mt-2">Supports all file types. Max size 50MB.</p>
                  </div>

                  {fileUpload && (
                    <div className="p-4 bg-muted rounded">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <File className="h-5 w-5" />
                          <span className="font-medium">{fileUpload.name}</span>
                        </div>
                        <Button variant="ghost" size="sm" onClick={removeSelectedFile} disabled={isProcessing}>
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                      <div className="mt-2 text-sm text-muted-foreground">
                        <p>Size: {(fileUpload.size / 1024).toFixed(2)} KB</p>
                        <p>Type: {fileUpload.type || "Unknown"}</p>
                      </div>
                    </div>
                  )}

                  {activeScanId && (
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">Scanning progress</span>
                        <span className="text-sm">
                          {messages.find((m) => m.fileAnalysis?.scanId === activeScanId)?.fileAnalysis
                            ?.analysisProgress || 0}
                          %
                        </span>
                      </div>
                      <Progress
                        value={
                          messages.find((m) => m.fileAnalysis?.scanId === activeScanId)?.fileAnalysis
                            ?.analysisProgress || 0
                        }
                        className="h-2"
                      />
                      <p className="text-xs text-muted-foreground">
                        Running multiple detection engines and behavior analysis...
                      </p>
                    </div>
                  )}

                  <div className="space-y-4">
                    <h3 className="text-sm font-medium">Analysis Options</h3>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="static-analysis"
                          className="rounded border-gray-300 text-primary focus:ring-primary"
                          defaultChecked
                        />
                        <div>
                          <Label htmlFor="static-analysis">Static Analysis</Label>
                          <p className="text-xs text-muted-foreground">
                            Analyze file structure and code without execution
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="dynamic-analysis"
                          className="rounded border-gray-300 text-primary focus:ring-primary"
                          defaultChecked
                        />
                        <div>
                          <Label htmlFor="dynamic-analysis">Dynamic Analysis</Label>
                          <p className="text-xs text-muted-foreground">Execute file in sandbox to observe behavior</p>
                        </div>
                      </div>

                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="ai-detection"
                          className="rounded border-gray-300 text-primary focus:ring-primary"
                          defaultChecked
                        />
                        <div>
                          <Label htmlFor="ai-detection">AI-Powered Detection</Label>
                          <p className="text-xs text-muted-foreground">
                            Use machine learning to identify unknown threats
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="memory-analysis"
                          className="rounded border-gray-300 text-primary focus:ring-primary"
                          defaultChecked
                        />
                        <div>
                          <Label htmlFor="memory-analysis">Memory Analysis</Label>
                          <p className="text-xs text-muted-foreground">
                            Detect fileless malware and memory-resident threats
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center space-x-2 p-2 bg-muted rounded">
                    <AlertTriangle className="h-4 w-4 text-amber-500 flex-shrink-0" />
                    <p className="text-sm text-muted-foreground">
                      Files are analyzed in a secure sandbox environment. Never upload sensitive or confidential data.
                    </p>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button
                  className="w-full"
                  disabled={!fileUpload || isProcessing || !!activeScanId}
                  onClick={handleSendMessage}
                >
                  {activeScanId ? "Analyzing..." : "Analyze File"}
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="hash" className="flex-1 flex flex-col">
            <Card>
              <CardHeader>
                <CardTitle>Hash Lookup</CardTitle>
                <CardDescription>Check file hash against our malware database</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <Label htmlFor="file-hash">File Hash</Label>
                    <div className="flex mt-1.5">
                      <Input
                        id="file-hash"
                        placeholder="Enter MD5, SHA-1, or SHA-256 hash"
                        value={fileHash}
                        onChange={(e) => setFileHash(e.target.value)}
                        disabled={isProcessing}
                        className="flex-1"
                      />
                      <Button className="ml-2" disabled={!fileHash || isProcessing} onClick={handleSendMessage}>
                        Lookup
                      </Button>
                    </div>
                    <p className="text-xs text-muted-foreground mt-1.5">
                      Example: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                    </p>
                  </div>

                  <Separator />

                  <div>
                    <h3 className="text-sm font-medium mb-2">What is a file hash?</h3>
                    <p className="text-sm text-muted-foreground">
                      A file hash is a unique digital fingerprint generated from a file's contents. Even a tiny change
                      to the file will produce a completely different hash value. Security professionals use hashes to
                      identify known malware without needing the actual file.
                    </p>

                    <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                      <Card>
                        <CardHeader className="pb-2">
                          <CardTitle className="text-base">MD5</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <p className="text-sm text-muted-foreground">
                            128-bit hash value, faster but less secure against collisions
                          </p>
                          <code className="mt-2 p-1 bg-muted rounded text-xs font-mono block">
                            d41d8cd98f00b204e9800998ecf8427e
                          </code>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardHeader className="pb-2">
                          <CardTitle className="text-base">SHA-1</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <p className="text-sm text-muted-foreground">
                            160-bit hash value, more secure than MD5 but still vulnerable
                          </p>
                          <code className="mt-2 p-1 bg-muted rounded text-xs font-mono block">
                            da39a3ee5e6b4b0d3255bfef95601890afd80709
                          </code>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardHeader className="pb-2">
                          <CardTitle className="text-base">SHA-256</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <p className="text-sm text-muted-foreground">
                            256-bit hash value, highly secure and recommended for malware identification
                          </p>
                          <code className="mt-2 p-1 bg-muted rounded text-xs font-mono block break-all">
                            e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
                          </code>
                        </CardContent>
                      </Card>
                    </div>
                  </div>

                  <div className="flex items-center space-x-2 p-2 bg-muted rounded">
                    <Shield className="h-4 w-4 text-primary flex-shrink-0" />
                    <p className="text-sm text-muted-foreground">
                      Our database contains over 100 million malware hashes and is updated continuously with the latest
                      threats.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="recent" className="flex-1 flex flex-col">
            <Card>
              <CardHeader>
                <CardTitle>Recent Detections</CardTitle>
                <CardDescription>Recently analyzed files and detected threats</CardDescription>
              </CardHeader>
              <CardContent>
                <ScrollArea className="h-[500px]">
                  <div className="space-y-4">
                    {recentDetections.length === 0 ? (
                      <p className="text-center text-muted-foreground py-8">No recent detections</p>
                    ) : (
                      recentDetections.map((detection) => (
                        <Card
                          key={detection.id}
                          className="border-l-4"
                          style={{
                            borderLeftColor:
                              detection.status === "malicious"
                                ? "var(--destructive)"
                                : detection.status === "suspicious"
                                  ? "orange"
                                  : "green",
                          }}
                        >
                          <CardHeader className="pb-2">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center space-x-2">
                                {getStatusIcon(detection.status)}
                                <CardTitle className="text-base">{detection.filename}</CardTitle>
                              </div>
                              <Badge className={getStatusColor(detection.status)}>{detection.status}</Badge>
                            </div>
                            <CardDescription>
                              {detection.fileType} • Detected: {detection.timestamp}
                            </CardDescription>
                          </CardHeader>
                          <CardContent>
                            <div className="space-y-2">
                              {detection.malwareType && (
                                <div className="flex items-center justify-between">
                                  <span className="text-sm">Detected Threat</span>
                                  <span className="text-sm font-medium">{detection.malwareType}</span>
                                </div>
                              )}

                              <div className="flex items-center justify-between">
                                <span className="text-sm">Detection Confidence</span>
                                <span
                                  className={`text-sm font-medium ${
                                    detection.confidence > 90
                                      ? "text-destructive"
                                      : detection.confidence > 70
                                        ? "text-amber-500"
                                        : "text-green-500"
                                  }`}
                                >
                                  {detection.confidence}%
                                </span>
                              </div>
                              <Progress
                                value={detection.confidence}
                                className="h-2"
                                style={
                                  {
                                    background: "var(--secondary)",
                                    "--progress-background":
                                      detection.confidence > 90
                                        ? "var(--destructive)"
                                        : detection.confidence > 70
                                          ? "orange"
                                          : "green",
                                  } as React.CSSProperties
                                }
                              />

                              <div className="flex justify-end mt-4">
                                <Button variant="outline" size="sm" onClick={() => handleViewDetails(detection.id)}>
                                  View Details
                                </Button>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))
                    )}
                  </div>
                </ScrollArea>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="signatures" className="flex-1 flex flex-col">
            <Card>
              <CardHeader>
                <CardTitle>Malware Signature Database</CardTitle>
                <CardDescription>Browse our database of known malware signatures</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="mb-4">
                  <Input placeholder="Search malware signatures..." className="w-full" />
                </div>

                <ScrollArea className="h-[500px]">
                  {isLoadingSignatures ? (
                    <div className="flex justify-center items-center h-40">
                      <div className="flex space-x-2">
                        <div className="h-3 w-3 bg-primary rounded-full animate-bounce [animation-delay:-0.3s]"></div>
                        <div className="h-3 w-3 bg-primary rounded-full animate-bounce [animation-delay:-0.15s]"></div>
                        <div className="h-3 w-3 bg-primary rounded-full animate-bounce"></div>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {malwareSignatures.length === 0 ? (
                        <p className="text-center text-muted-foreground py-8">No malware signatures found</p>
                      ) : (
                        malwareSignatures.map((signature) => (
                          <Card key={signature.id}>
                            <CardHeader className="pb-2">
                              <div className="flex items-center justify-between">
                                <CardTitle className="text-base flex items-center">
                                  <FileCode className="h-4 w-4 mr-2" />
                                  {signature.name}
                                </CardTitle>
                                <Badge className={getSeverityBadgeColor(signature.severity)}>
                                  {signature.severity}
                                </Badge>
                              </div>
                              <CardDescription>
                                Type: {signature.type} • First seen: {signature.firstSeen}
                              </CardDescription>
                            </CardHeader>
                            <CardContent>
                              <div className="space-y-2">
                                <p className="text-sm">{signature.description}</p>

                                <div className="flex items-center justify-between text-sm">
                                  <span>Detection Count</span>
                                  <span className="font-medium">{signature.detectionCount}</span>
                                </div>

                                <div className="flex items-center justify-between text-sm">
                                  <span>Last Seen</span>
                                  <span className="font-medium">{signature.lastSeen}</span>
                                </div>

                                <div className="flex justify-end mt-2">
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleViewSignatureDetails(signature.id)}
                                  >
                                    View Details
                                  </Button>
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))
                      )}
                    </div>
                  )}
                </ScrollArea>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}

